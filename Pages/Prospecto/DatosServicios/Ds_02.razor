@page "/Prospecto/DatosServicios/ds_02"

@* @using Microsoft.AspNetCore.Authorization *@
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using Afiliacion.Models.Page
@using Afiliacion.Services.Page
@inject PageElementsService PageElements
@layout MainLayout
@* @attribute [Authorize] *@
@using Afiliacion.Data
@inject WeatherForecastService ForecastService

<PageTitle>Seguro de Vida</PageTitle>
<EditForm Model="person">
    <div class="data-form data-panel">
        <h3>Seguro de vida:</h3>
        <form class="data-form">
            <div class="form-group grid-2-columns">            
                <div>
                    <label>Estado Actual:</label>                    
                    <InputSelect @bind-Value="person.co_gene" class="form-select">
                        <option value="">Seleccione opción</option>
                        @foreach (var exequia in LocalElements.lst_PersPoliExpuesta) {
                            <option value="@exequia.co_poli_exp">@exequia.ds_poli_exp</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => person.co_gene)" />
                </div>
                <div>
                    <label>Monto:</label>
                    @* <input type="text" id="no_nom" @bind="person.no_nom" class="form-control" /> *@
                    <InputText @bind-Value="person.no_nom" class="form-control" />
                    <ValidationMessage For="@(() => person.no_nom)" />
                </div>
            </div>
            <div class="text-end">
                <button @onclick="BuscaReg" class="btn btn-primary">Guardar</button>
            </div>
        </form>

        <p>Detalle de Benficiarios del servicio.</p>

        @if (forecasts == null) {
            <p><em>Loading...</em></p>
        } else {
            <table class="table">
                <thead>
                    <tr>
                        <th>Date</th>
                        <th>Temp. (C)</th>
                        <th>Temp. (F)</th>
                        <th>Summary</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var forecast in forecasts) {
                        <tr>
                            <td>@forecast.Date.ToShortDateString()</td>
                            <td>@forecast.TemperatureC</td>
                            <td>@forecast.TemperatureF</td>
                            <td>@forecast.Summary</td>
                        </tr>
                    }
                </tbody>
            </table>
        }



    </div>
</EditForm>
@code {
    private Person person = new Person();
    private PageElementsModel LocalElements;
    private LocalConfig localConfig= new LocalConfig();
    private string numCelular;
    private string numConvencional;

    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync() {
        forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
        LocalElements = PageElements.PageElements;
    }

    private void FormatCelular(ChangeEventArgs e) {
        string input = e.Value.ToString();
        // Conserva solo los caracteres permitidos
        input = new string(input.Where(c => char.IsDigit(c) || c == '(' || c == ')' || c == '-').ToArray());
        if (!string.IsNullOrEmpty(input.Trim())) {
            input = input.Replace("(", "").Replace(")", "").Replace("-", "");
            if (input.Length > 2)
            {
                input = "(" + input.Substring(0, 2) + ") " + input.Substring(2);
            }
            if (input.Length > 9)
            {
                input = input.Substring(0, 9) + "-" + input.Substring(9);
            }
            numCelular = input;
        }
        else {
            
        }        
    }


    private void FormatConvencional(ChangeEventArgs e) {
        var number = e.Value.ToString().Replace(" ", "");
        if (!string.IsNullOrEmpty(number)) {
            number = number.Replace("(", "").Replace(")", "").Replace("-", "");
            if (number.Length > 2) {
                number = "(" + number.Substring(0, 2) + ") " + number.Substring(2);
            }
            if (number.Length > 9) {
                number = number.Substring(0, 9) + "-" + number.Substring(9);
            }
        }
        numConvencional = number;
    }

    private void BuscaReg() {
        // Aquí puedes implementar la lógica para guardar los datos de la persona
        // Por ejemplo, enviarlos al servidor o almacenarlos localmente.
        // person contiene los valores ingresados por el usuario.
    }
    protected override void OnInitialized() {
        person.fec_naci = DateTime.Parse(localConfig.YearsAgo_18);
        
        person.FormattedDate = DateTime.Today.ToString(); 
        base.OnInitialized();
    }

    public class Person {
        [Required(ErrorMessage = "Debe ingresar la cedula.")]
        [RegularExpression("^[0-9]*$", ErrorMessage = "Solo se permiten números.")]
        [StringLength(11, ErrorMessage = "La cédula no puede exceder los 11 caracteres.")]
        public string ci_cedula { get; set; }

        public DateTime fec_firmContAdhe { get; set; }        
        public string FormattedDate {
            get {
                return fec_firmContAdhe.ToString("dd 'de' MMMM 'de' yyyy");
            }
            set {
                DateTime.TryParse(value, out DateTime parsedDate);
                fec_firmContAdhe = parsedDate;
            }
        }
        public string no_nom { get; set; }
        public string no_apel { get; set; }
        public string co_gene { get; set; }
        public string co_pais_naci { get; set; }
        public DateTime fec_naci{ get; set; }

        public string Email { get; set; }
        public string Phone { get; set; }
        public string Address { get; set; }
    }
    public class LocalConfig {
        public string YearsAgo_18 => DateTime.Today.AddYears(-18).ToString("yyyy-MM-dd");
        public string YearsAgo_90 => DateTime.Today.AddYears(-90).ToString("yyyy-MM-dd");
    }
}
